"use client"

import type React from "react"

import { useState } from "react"
import { Send, X, Bot, User, Brain, CreditCard, BarChart3, DollarSign } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"

interface ChatAssistantProps {
  language: string
}

interface Message {
  id: string
  role: "user" | "assistant"
  content: string
  actionButtons?: ActionButton[]
}

interface ActionButton {
  text: string
  type: "primary" | "secondary"
  icon?: React.ReactNode
}

export function ChatAssistant({ language }: ChatAssistantProps) {
  const [isOpen, setIsOpen] = useState(false)
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      role: "assistant",
      content:
        language === "en"
          ? "Hello! I'm your banking assistant. I can help you find the perfect credit card, answer questions about our products, and guide you through the application process. How can I help you today?"
          : language === "hi"
            ? "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§¨‡•à‡§Ç‡§ï‡§ø‡§Ç‡§ó ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü‡•á‡§Ç‡§ü ‡§π‡•Ç‡§Ç‡•§ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•ã ‡§∏‡§π‡•Ä ‡§ï‡•ç‡§∞‡•á‡§°‡§ø‡§ü ‡§ï‡§æ‡§∞‡•ç‡§° ‡§ñ‡•ã‡§ú‡§®‡•á, ‡§π‡§Æ‡§æ‡§∞‡•á ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡•ã‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡•ã‡§Ç ‡§ï‡•á ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•á‡§®‡•á ‡§î‡§∞ ‡§Ü‡§µ‡•á‡§¶‡§® ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§Æ‡•á‡§Ç ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§® ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç?"
            : "¬°Hola! Soy tu asistente bancario. Puedo ayudarte a encontrar la tarjeta de cr√©dito perfecta, responder preguntas sobre nuestros productos y guiarte a trav√©s del proceso de solicitud. ¬øC√≥mo puedo ayudarte hoy?",
    },
  ])
  const [input, setInput] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const [showContext, setShowContext] = useState(false)

  // Simulated user preferences (hardcoded for now)
  const userPreferences = {
    en: "Travel-focused, No annual fee, Cashback",
    hi: "‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ-‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞‡§ø‡§§, ‡§ï‡•ã‡§à ‡§µ‡§æ‡§∞‡•ç‡§∑‡§ø‡§ï ‡§∂‡•Å‡§≤‡•ç‡§ï ‡§®‡§π‡•Ä‡§Ç, ‡§ï‡•à‡§∂‡§¨‡•à‡§ï",
    es: "Enfocado en viajes, Sin cuota anual, Cashback",
  }

  // Trust disclaimer text
  const trustDisclaimer = {
    en: "Based on verified product information from August 2025",
    hi: "‡§Ö‡§ó‡§∏‡•ç‡§§ 2025 ‡§∏‡•á ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§ ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞",
    es: "Basado en informaci√≥n verificada del producto de agosto 2025",
  }

  const suggestionButtons = [
    {
      en: "Best cashback card",
      hi: "‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§ï‡•à‡§∂‡§¨‡•à‡§ï ‡§ï‡§æ‡§∞‡•ç‡§°",
      es: "Mejor tarjeta de cashback",
    },
    {
      en: "Compare Gold vs Platinum",
      hi: "‡§ó‡•ã‡§≤‡•ç‡§° ‡§¨‡§®‡§æ‡§Æ ‡§™‡•ç‡§≤‡•à‡§ü‡§ø‡§®‡§Æ ‡§ï‡•Ä ‡§§‡•Å‡§≤‡§®‡§æ",
      es: "Comparar Gold vs Platinum",
    },
    {
      en: "How do I apply?",
      hi: "‡§Æ‡•à‡§Ç ‡§ï‡•à‡§∏‡•á ‡§Ü‡§µ‡•á‡§¶‡§® ‡§ï‡§∞‡•Ç‡§Ç?",
      es: "¬øC√≥mo aplico?",
    },
  ]

  const getActionButtons = (messageType: string): ActionButton[] => {
    /* (same as before) */
    // ‚Ä¶ your existing code ‚Ä¶
  }

  // REMOVE getMemoryAwareResponse and the mock timeout

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!input.trim() || isLoading) return

    const userMessage: Message = {
      id: Date.now().toString(),
      role: "user",
      content: input.trim(),
    }

    // 1) Add the user's message
    setMessages((prev) => [...prev, userMessage])
    setInput("")
    setIsLoading(true)
    setShowContext(true)

    try {
      // 2) Send to your real backend
      const res = await fetch("/api/chat", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ message: userMessage.content }),
      })
      const { reply, error } = await res.json()
      if (error) throw new Error(error)

      // Hide context tag once we have a reply
      setShowContext(false)
      // 3) Add the assistant's reply
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: "assistant",
        content: reply,
        actionButtons: getActionButtons("default"), // you can adjust based on reply content
      }
      setMessages((prev) => [...prev, assistantMessage])
    } catch (err) {
      console.error(err)
      setMessages((prev) => [
        ...prev,
        {
          id: (Date.now() + 2).toString(),
          role: "assistant",
          content: "Sorry, something went wrong. Please try again.",
        },
      ])
    } finally {
      setIsLoading(false)
    }
  }

  const handleSuggestionClick = (suggestion: string) => {
    setInput(suggestion)
  }

  const handleActionButtonClick = (buttonText: string) => {
    console.log(`Action button clicked: ${buttonText}`)
  }

  // Floating chat icon when closed
  if (!isOpen) {
    return (
      <div className="fixed bottom-6 right-6 z-50">
        <Button
          onClick={() => setIsOpen(true)}
          className="w-14 h-14 rounded-full bg-blue-800 hover:bg-blue-900 shadow-lg transition-all duration-200 flex items-center justify-center"
          size="icon"
        >
          <span className="text-2xl">üí¨</span>
        </Button>
      </div>
    )
  }

  // Chat window when open (same UI as before)
  return (
    <div className="fixed bottom-6 right-6 z-50 w-[350px] max-w-[calc(100vw-2rem)]">
      {showContext && (
        <div className="mb-3 animate-in slide-in-from-bottom-2 duration-300">
          <div className="bg-gray-100 border border-gray-200 rounded-full px-4 py-2 shadow-sm">
            <div className="flex items-center gap-2 text-sm text-gray-700">
              <Brain className="w-4 h-4 text-gray-600" />
              <span className="font-medium">
                {language === "en" && "üß† Agent is considering your preferences:"}
                {language === "hi" && "üß† ‡§è‡§ú‡•á‡§Ç‡§ü ‡§Ü‡§™‡§ï‡•Ä ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ‡§ì‡§Ç ‡§™‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à:"}
                {language === "es" && "üß† El agente est√° considerando tus preferencias:"}
              </span>
              <span className="text-blue-700 font-medium">
                {userPreferences[language]}
              </span>
            </div>
          </div>
        </div>
      )}

      <Card className="h-[500px] flex flex-col shadow-2xl rounded-2xl border-0 bg-white">
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-3 bg-blue-800 text-white rounded-t-2xl px-4 py-3">
          <CardTitle className="text-lg flex items-center gap-2">
            <Bot className="w-5 h-5" />
            {language === "en" && "Banking Assistant"}
            {language === "hi" && "‡§¨‡•à‡§Ç‡§ï‡§ø‡§Ç‡§ó ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü‡•á‡§Ç‡§ü"}
            {language === "es" && "Asistente Bancario"}
          </CardTitle>
          <Button
            variant="ghost"
            size="icon"
            onClick={() => setIsOpen(false)}
            className="text-white hover:bg-blue-700 w-8 h-8"
          >
            <X className="w-4 h-4" />
          </Button>
        </CardHeader>

        <CardContent className="flex-1 flex flex-col p-0">
          {/* Messages list (unchanged) */}
          <div className="flex-1 overflow-y-auto p-4 space-y-4">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex gap-3 ${
                  message.role === "user" ? "justify-end" : "justify-start"
                }`}
              >
                {/* ...rendering logic unchanged‚Ä¶ */}
              </div>
            ))}
            {isLoading && (
              /* ‚Ä¶loading indicator unchanged‚Ä¶ */
              <div className="flex gap-3 justify-start">
                {/* ‚Ä¶ */}
              </div>
            )}
          </div>

          {/* Suggestion buttons unchanged */}
          <div className="p-4 border-t bg-gray-50">
            {/* ‚Ä¶ */}
          </div>

          {/* Input form */}
          <div className="p-4 border-t">
            <form onSubmit={handleSubmit} className="flex gap-2">
              <Input
                value={input}
                onChange={(e) => setInput(e.target.value)}
                placeholder={
                  language === "en"
                    ? "Ask about credit cards..."
                    : language === "hi"
                      ? "‡§ï‡•ç‡§∞‡•á‡§°‡§ø‡§ü ‡§ï‡§æ‡§∞‡•ç‡§° ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ‡•á‡§Ç..."
                      : "Pregunta sobre tarjetas de cr√©dito..."
                }
                disabled={isLoading}
                className="flex-1"
              />
              <Button
                type="submit"
                disabled={isLoading || !input.trim()}
                size="icon"
                className="bg-blue-800 hover:bg-blue-900"
              >
                <Send className="w-4 h-4" />
              </Button>
            </form>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
